# Use an official Ubuntu as a parent image
FROM ubuntu:23.04

# Set environment variables to non-interactive
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies, Docker CLI, and other tools
RUN apt-get update && \
    apt-get install -y \
    neovim \
    apt-transport-https \
    ca-certificates \
    curl \
    wget \
    vim \
    gnupg2 \
    software-properties-common \
    build-essential \
    python3 \
    python3-pip \
    python3-venv \
    asciidoctor \
    bash \
    jq \
    git \
    kmod \
    fuse-overlayfs \
    parallel && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y \
       docker-ce-cli && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory for the project
WORKDIR /workspace

# Copy the project files
COPY . /workspace

# Expose any ports if necessary
# EXPOSE 8000

# Set environment variables for the virtual environment
ENV PATH="/workspace/venv/bin:$PATH"

# Create and activate a virtual environment and install dependencies
RUN python3 -m venv /workspace/venv && \
    /bin/bash -c "source /workspace/venv/bin/activate && pip install --no-cache-dir -r /workspace/requirements.txt && pip install --no-cache-dir -r /workspace/requirements-dev.txt && pip list"

# Start Docker daemon (if needed)
# CMD ["dockerd"]
