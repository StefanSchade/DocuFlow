
// File: pipeline.py Depth: 0

01 # File: pipeline.py
02 import os
03 import logging
04 from step_01_preprocess.preprocess_step import PreprocessStep
05 from step_02_ocr.ocr_step import OCRStep
06 
07 # Constants
08 INPUT_DIRECTORY = '/workspace/data'
09 LOG_FILE = '/workspace/data/pipeline.log'
10 PATH_TO_TESSERACT = '/usr/share/tesseract-ocr/4.00/tessdata'
11 
12 def run_pipeline(args):
13     logging.info("Starting pipeline execution")
14     
15     # Add PATH_TO_TESSERACT to args
16     args.path_to_tesseract = PATH_TO_TESSERACT
17     
18     # Step 1: Preprocessing
19     step_01 = PreprocessStep(args)
20     step_01.run(INPUT_DIRECTORY)
21 
22     # Step 2: OCR
23     step_02 = OCRStep(args)
24     step_02.run(INPUT_DIRECTORY)
25 
26     logging.info("Pipeline execution completed successfully")
27 
28 if __name__ == "__main__":
29     import argparse
30     parser = argparse.ArgumentParser(description='Run OCR pipeline')
31     parser.add_argument('--grayscale', action='store_true', help='Convert image to grayscale')
32     parser.add_argument('--remove-noise', action='store_true', help='Apply noise removal')
33     parser.add_argument('--threshold', type=int, default=0, help='Threshold for binarization')
34     parser.add_argument('--dilate', action='store_true', help='Apply dilation')
35     parser.add_argument('--erode', action='store_true', help='Apply erosion')
36     parser.add_argument('--opening', action='store_true', help='Apply opening (erosion followed by dilation)')
37     parser.add_argument('--canny', action='store_true', help='Apply Canny edge detection')
38     parser.add_argument('--language', type=str, default='eng', help='Language for Tesseract OCR')
39     parser.add_argument('--check-orientation', type=str, choices=['NONE', 'BASIC', 'FINE'], default='NONE', help='Check and correct orientation')
40     parser.add_argument('--psm', type=int, choices=list(range(14)), default=6, help='Tesseract Page Segmentation Mode (PSM)')
41     parser.add_argument('--save-preprocessed', action='store_true', help='Save preprocessed images')
42     parser.add_argument('--log-level', type=str, choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='INFO', help='Set the logging level')
43     
44     args = parser.parse_args()
45 
46     # Setup logging
47     logging.basicConfig(filename=LOG_FILE, level=getattr(logging, args.log_level.upper()), format='%(asctime)s - %(levelname)s - %(message)s')
48 
49     logging.debug(f"Running Pipeline args={args}")    
50 
51     run_pipeline(args)

// File: pipeline_step.py Depth: 0

1 from abc import ABC, abstractmethod
2 
3 class PipelineStep(ABC):
4     @abstractmethod
5     def run(self, input_data):
6         pass

// File: step_01_preprocess\preprocess_step.py Depth: 1

01 import cv2
02 import numpy as np
03 import os
04 from pipeline_step import PipelineStep
05 
06 class PreprocessStep(PipelineStep):
07     def __init__(self, args):
08         self.args = args
09 
10     def preprocess_image(self, image):
11         if self.args.grayscale or self.args.threshold > 0:
12             image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
13         if self.args.remove_noise:
14             image = cv2.medianBlur(image, 5)
15         if self.args.threshold > 0:
16             _, image = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
17         if self.args.dilate:
18             kernel = np.ones((5, 5), np.uint8)
19             image = cv2.dilate(image, kernel, iterations=1)
20         if self.args.erode:
21             kernel = np.ones((5, 5), np.uint8)
22             image = cv2.erode(image, kernel, iterations=1)
23         if self.args.opening:
24             kernel = np.ones((5, 5), np.uint8)
25             image = cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)
26         if self.args.canny:
27             image = cv2.Canny(image, 100, 200)
28         return image
29 
30     def run(self, input_data):
31         image_files = [f for f in os.listdir(input_data) if f.endswith(('.jpeg', '.jpg', '.png'))]
32         os.makedirs(os.path.join(input_data, 'preprocessed'), exist_ok=True)
33         for image_file in image_files:
34             img_path = os.path.join(input_data, image_file)
35             img = cv2.imread(img_path)
36             processed_img = self.preprocess_image(img)
37             cv2.imwrite(os.path.join(input_data, 'preprocessed', image_file), processed_img)

// File: step_01_preprocess\__init__.py Depth: 1


// File: step_02_ocr\ocr_step.py Depth: 1

01 import os
02 from PIL import Image
03 from pipeline_step import PipelineStep
04 from step_02_ocr.utils_optimization import check_orientations
05 from step_02_ocr.utils_tesseract import tesseract_ocr
06 import json
07 import logging
08 
09 class OCRStep(PipelineStep):
10     def __init__(self, args):
11         self.language = args.language
12         self.tessdata_dir = args.path_to_tesseract
13         self.check_orientation = args.check_orientation
14         self.psm = args.psm
15         self.save_preprocessed = args.save_preprocessed
16         self.log_level = args.log_level.upper()
17 
18     def run(self, main_directory):
19         preprocessed_dir = os.path.join(main_directory, 'preprocessed')
20         ocr_result_dir = os.path.join(main_directory, 'ocr_result')
21         if self.log_level == 'DEBUG':
22             ocr_debug_dir = os.path.join(main_directory, 'ocr_debug')
23             os.makedirs(ocr_debug_dir, exist_ok=True)
24         
25         os.makedirs(ocr_result_dir, exist_ok=True)
26         tessdata_dir_config = f'--tessdata-dir "{self.tessdata_dir}"'
27         image_files = [f for f in os.listdir(preprocessed_dir) if f.endswith(('.jpeg', '.jpg', '.png'))]
28         output_file = os.path.join(ocr_result_dir, 'ocr_result.json')
29 
30         # Delete the output file if it exists
31         try:
32             os.remove(output_file)
33             logging.info(f"Deleted existing file: {output_file}")
34         except FileNotFoundError:
35             logging.info(f"No existing file to delete: {output_file}")
36 
37         for index, image_file in enumerate(image_files, start=1):
38             img_path = os.path.join(preprocessed_dir, image_file)
39             logging.info(f"Starting analysis of file: {image_file}")
40             img = Image.open(img_path)
41             text, final_angle, confidence = check_orientations(img, self.language, tessdata_dir_config, self.psm, self.check_orientation, ocr_debug_dir )
42             text_lines = text.split('\n')
43 
44             json_output = {
45                 "page_number": index,
46                 "source_file": image_file,
47                 "final_angle": final_angle,
48                 "confidence": confidence,
49                 "text_lines": text_lines
50             }
51             with open(output_file, 'a', encoding='utf-8') as file_out:
52                 json.dump(json_output, file_out)
53                 file_out.write('\n')
54             logging.debug(f"Processed {image_file} with final angle: {final_angle}")
55 
56             # Save processed image if required
57             if self.save_preprocessed:
58                 img.save(os.path.join(ocr_result_dir, f"processed_{image_file}"))

// File: step_02_ocr\utils_optimization.py Depth: 1

001 # File: step_02_ocr/utils_optimization.py
002 import os
003 import numpy as np
004 from PIL import Image
005 from step_02_ocr.utils_tesseract import tesseract_ocr
006 import logging
007 
008 # Constants for fine orientation checks
009 DEFAULT_SMALL_ROTATION_STEP = 1  # degrees
010 DEFAULT_MAX_ROTATION_STEPS = 20  # steps
011 HIGH_CONFIDENCE_THRESHOLD = 95  # Set an appropriate threshold for high confidence
012 
013 def rotate_image(image, angle, ocr_debug_dir):
014     """Rotate the image by a specific angle without cropping."""
015     # width, height = image.size
016     # diagonal = int(np.sqrt(width**2 + height**2))
017     # new_image = Image.new("RGB", (diagonal, diagonal), (255, 255, 255))
018     # new_image.paste(image, ((diagonal - width) // 2, (diagonal - height) // 2))
019     # rotated_image = new_image.rotate(angle, expand=True)
020     
021     rotated_image = image.rotate(angle, expand=True)
022     
023     if ocr_debug_dir is not None:
024         rotated_image.save(os.path.join(ocr_debug_dir, f"angle_{angle}.jpg"))
025     return rotated_image
026 
027 def check_orientations(input_image, language, tessdata_dir_config, psm, check_orientation, ocr_debug_dir):
028     if check_orientation == 'NONE':
029         text, confidence, _ = tesseract_ocr(input_image, language, tessdata_dir_config, psm, ocr_debug_dir, 0)
030         return text, 0, confidence
031 
032     orientations = [0, 90, 180, 270, 45, 135, 225, 315]
033     best_text = ''
034     highest_confidence = -1
035     final_angle = 0
036     baseline_length = 0
037 
038     logging.debug(f"Basic orientation check with psm={psm}, language={language}")
039 
040     # Basic orientation check
041     for angle in orientations:
042         rotated_image = rotate_image(input_image, angle, ocr_debug_dir)
043         text, confidence, text_length = tesseract_ocr(rotated_image, language, tessdata_dir_config, psm, ocr_debug_dir, angle)
044         logging.debug(f"..... angle={angle} degrees, confidence={confidence}, text length={len(text)}")
045 
046         if confidence > highest_confidence:
047             highest_confidence = confidence
048             best_text = text
049             final_angle = angle
050             baseline_length = text_length
051 
052         # Early stopping if confidence is high enough
053         if confidence >= HIGH_CONFIDENCE_THRESHOLD:
054             logging.debug(f"High confidence {confidence} at {angle} degrees, stopping coarse check early.")
055             break
056 
057     logging.debug(f"Basic orientation correction result: Confidence={highest_confidence}, orientation={final_angle}")
058 
059     if check_orientation == 'FINE':
060         logging.debug(f"Fine orientation check around angle={final_angle}, direction 1")
061         step = DEFAULT_SMALL_ROTATION_STEP
062 
063         # Fine adjustments in one direction
064         improved = True
065         while step <= DEFAULT_MAX_ROTATION_STEPS and improved:
066             adjusted_angle = final_angle + step
067             adjusted_image = rotate_image(input_image, adjusted_angle, ocr_debug_dir)
068             adjusted_text, adjusted_confidence, adjusted_length = tesseract_ocr(adjusted_image, language, tessdata_dir_config, psm, ocr_debug_dir, adjusted_angle)
069             # Penalize the confidence if the length of the text deviates significantly from the baseline
070             length_penalty = abs(baseline_length - adjusted_length) / baseline_length
071             adjusted_confidence -= length_penalty * adjusted_confidence
072             logging.debug(f"Fine check at {adjusted_angle} degrees: Confidence={adjusted_confidence}, Text={adjusted_text}")
073 
074             if adjusted_confidence > highest_confidence:
075                 highest_confidence = adjusted_confidence
076                 best_text = adjusted_text
077                 final_angle = adjusted_angle
078                 improved = True
079             else:
080                 improved = False
081 
082             step += 1
083 
084         logging.debug(f"Fine orientation check around angle={final_angle}, direction 2")
085 
086         # If no improvement was found, try the other direction
087         if not improved:
088             step = DEFAULT_SMALL_ROTATION_STEP
089             improved = True
090             while step <= DEFAULT_MAX_ROTATION_STEPS and improved:
091                 adjusted_angle = final_angle - step
092                 adjusted_image = rotate_image(input_image, adjusted_angle, ocr_debug_dir)
093                 adjusted_text, adjusted_confidence, adjusted_length = tesseract_ocr(adjusted_image, language, tessdata_dir_config, psm, ocr_debug_dir, adjusted_angle)
094                 length_penalty = abs(baseline_length - adjusted_length) / baseline_length
095                 adjusted_confidence -= length_penalty * adjusted_confidence
096                 logging.debug(f"Fine check at {adjusted_angle} degrees: Confidence={adjusted_confidence}")
097 
098                 if adjusted_confidence > highest_confidence:
099                     highest_confidence = adjusted_confidence
100                     best_text = adjusted_text
101                     final_angle = adjusted_angle
102                     improved = True
103                 else:
104                     improved = False
105 
106                 step += 1
107 
108     logging.info(f"Orientation correction result: Confidence={highest_confidence}, orientation={final_angle}")
109     return best_text, final_angle, highest_confidence

// File: step_02_ocr\utils_tesseract.py Depth: 1

01 # File: step_02_ocr/utils_tesseract.py
02 import pytesseract
03 import logging
04 import os
05 import json
06 
07 # Constants
08 MIN_WORD_LENGTH_FOR_CONFIDENCE = 3
09 MIN_WORD_COUNT_FOR_CONFIDENCE = 3
10 MIN_CONFIDENCE_FOR_WORD = 60
11 
12 def tesseract_ocr(image, language, tessdata_dir_config, psm, ocr_debug_dir, angle):
13     config = f'--psm {psm} -l {language} {tessdata_dir_config}'
14     data = pytesseract.image_to_data(image, config=config, output_type=pytesseract.Output.DICT)
15 
16     lines = {}
17     confidences = []
18 
19     for i, word in enumerate(data['text']):
20         conf = int(data['conf'][i])
21         if conf > MIN_CONFIDENCE_FOR_WORD:  # Only consider confident recognitions
22             line_num = data['line_num'][i]
23             if line_num in lines:
24                 lines[line_num].append(word)
25             else:
26                 lines[line_num] = [word]
27             if len(word) >= MIN_WORD_LENGTH_FOR_CONFIDENCE:
28                 confidences.append(conf)
29 
30     text = '\n'.join([' '.join(lines[line]) for line in sorted(lines.keys())])
31     
32     if len(confidences) < MIN_WORD_COUNT_FOR_CONFIDENCE:
33         average_confidence = 0
34     else:
35         average_confidence = sum(confidences) / len(confidences)
36 
37     if ocr_debug_dir is not None:
38         debug_file_path = os.path.join(ocr_debug_dir, f"ocr_debug_data_angle_{angle}.json")
39         with open(debug_file_path, 'a', encoding='utf-8') as debug_file:
40             json.dump(data, debug_file, ensure_ascii=False, indent=4)
41             debug_file.write('\n')
42 
43     return text, average_confidence, len(data['text'])

// File: step_02_ocr\__init__.py Depth: 1


// File: step_03_postprocess\spellcheck_step.py Depth: 1


// File: step_03_postprocess\toc_generation_step Depth: 1


// File: step_03_postprocess\__init__.py Depth: 1


// File: __init__ copy.py Depth: 0


// File: __init__.py Depth: 0

